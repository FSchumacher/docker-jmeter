# Triggers a Docker workflow on push events and PRs but
# pushes to DockerHub only for push on the master branch.
# Runs GHC unit tests before DockerHub push.
#
# Author: Just van den Broecke - 2021
#
name: Docker Build âš“

on: [push, pull_request]

jobs:
  # Single job now to build Docker Image, run GHC unit tests, and push to DockerHub
  build_test_push:
    name: Build, Test and Push Docker Image to DockerHub

    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - jmeter-branch: 5.4
            jmeter-version: "5.4.3"
            jvm-version: "eclipse-temurin/11-jre-alpine"
            jvm-version-label: "eclipse-temurin-11-jre-alpine"
            tags-latest: "latest"
            with-plugins: "true"
          - jmeter-branch: 5.4
            jmeter-version: "5.4.3"
            jvm-version: "eclipse-temurin/11-jre-alpine"
            jvm-version-label: "eclipse-temurin-11-jre-alpine"
            tags-latest: "latest"
            with-plugins: "false"

    # v2 https://github.com/docker/build-push-action/blob/master/UPGRADE.md
    steps:
      - name: Checkout âœ…
        uses: actions/checkout@v2

      - name: Install  container-structure-test ðŸ“¦
        run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test

      - name: Prepare ðŸ“¦
        id: prep
        run: |
          DOCKER_IMAGE=anasoid/jmeter
          VERSION="${{ matrix.jmeter-version }}"
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          if [[ "${{ matrix.with-plugins }}" == "true" ]];then   echo ::set-output name=suffix::-plugins; else   echo ::set-output name=suffix::; fi;

      - name: Show Image Settings ðŸ“¦
        run: echo "IMAGE=${{ steps.prep.outputs.image }} VERSION=${{ steps.prep.outputs.version }} TAGS=${{ steps.prep.outputs.tags }}"

      - name: Set up Docker Buildx ðŸ“¦
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: Docker Build only - retain local Image ðŸ“¦
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.jmeter-branch }}/${{ matrix.jvm-version }}/Dockerfile
          load: true
          push: false
          build-args: |
            JMETER_VERSION=${{ matrix.jmeter-version }}
            WITH_BASE_PLUGINS=${{ matrix.with-plugins }}

          tags: |
            ${{ steps.prep.outputs.image }}:${{ matrix.jmeter-version }}${{ steps.prep.outputs.suffix }}
            ${{ steps.prep.outputs.image }}:${{ matrix.jmeter-version }}${{ steps.prep.outputs.suffix }}-${{ matrix.jvm-version-label }}
            ${{ steps.prep.outputs.image }}:${{ matrix.jmeter-branch }}${{ steps.prep.outputs.suffix }}
            ${{ steps.prep.outputs.image }}:${{ matrix.jmeter-branch }}${{ steps.prep.outputs.suffix }}-${{ matrix.jvm-version-label }}
            ${{ steps.prep.outputs.image }}:${{ matrix.tags-latest }}${{ steps.prep.outputs.suffix }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ github.sha }}
            "org.opencontainers.image.version": "7.15.1"

      - name: Test Jmeter Install
        run: |
          container-structure-test test -v info --image ${{ steps.prep.outputs.image }}:${{ matrix.jmeter-branch }} --config tests/container-structure-test/jmeter-install.yaml

      - name: Test Jmeter base Plugin Install
        run: |
          container-structure-test test -v info --image ${{ steps.prep.outputs.image }}:${{ matrix.jmeter-branch }} --config tests/container-structure-test/plugins-base-install.yaml

      - name: Test Jmeter Project/User Plugin Install
        run: |
          docker  run --name t1 -v ${PWD}/tests/projects/sample1/:/jmeter/project -v ${PWD}/tests/users/user1/:/jmeter/user ${{ steps.prep.outputs.image }}:${{ matrix.jmeter-branch }} hello
          expected='hello'
          c
          expected='after-project-test1'
          if [[ $(docker logs t1 | grep $expected ) ]];then echo "$expected found"; else "echo $expected not found"; exit 1; fi;
          expected='before-project-test1'
          if [[ $(docker logs t1 | grep $expected ) ]];then echo "$expected found"; else "echo $expected not found"; exit 1; fi;
          expected='after-user-test1'
          if [[ $(docker logs t1 | grep $expected ) ]];then echo "$expected found"; else "echo $expected not found"; exit 1; fi;
          expected='before-user-test1'
          if [[ $(docker logs t1 | grep $expected ) ]];then echo "$expected found"; else "echo $expected not found"; exit 1; fi;
          docker commit t1 t1 
          container-structure-test test -v info --image t1 --config tests/container-structure-test/sample1-install-plugins.yaml
          container-structure-test test -v info --image t1 --config tests/container-structure-test/user1-install-plugins.yaml
          docker rm t1
          docker rmi t1

      - name: Test Jmeter Clone Workspace
        run: |
          docker  run --name t1 -v ${PWD}/tests/projects/sample1/:/jmeter/project  -e CONF_COPY_TO_WORKSPACE=true ${{ steps.prep.outputs.image }}:${{ matrix.jmeter-branch }} hello
          docker commit t1 t1 
          container-structure-test test -v info --image t1 --config tests/container-structure-test/workspace-clone.yaml
          docker rm t1
          docker rmi t1

      - name: Test Jmeter don't clone Workspace
        run: |
          docker  run --name t1 -v ${PWD}/tests/projects/sample1/:/jmeter/project  ${{ steps.prep.outputs.image }}:${{ matrix.jmeter-branch }} hello
          docker commit t1 t1 
          container-structure-test test -v info --image t1 --config tests/container-structure-test/workspace-dont-clone.yaml
          docker rm t1
          docker rmi t1
